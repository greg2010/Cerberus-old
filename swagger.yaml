swagger: '2.0'

info:
  version: "0.0.2"
  title: RED Coalition Resources Auth

host: api.red.greg2010.me
basePath: /v1

consumes:
- application/json
produces:
- application/json

x-google-endpoints:
  - name: api.red.greg2010.me
    allowCors: true

definitions:
  TokenResponse:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
  SSOLoginResponse:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      currentCharacterId:
        type: integer
        format: int64
  EveCharacterInfo:
    type: object
    required:
      - characterId
      - characterName
      - corporationId
      - corporationName
      - corporationTicker
    properties:
      characterId:
        type: integer
        format: int64
      characterName:
        type: string
      corporationId:
        type: integer
        format: int64
      corporationName:
        type: string
      corporationTicker:
        type: string
      allianceId:
        type: integer
        format: int64
      allianceName:
        type: string
      allianceTicker:
        type: string
  ErrorResponse:
    type: object
    properties:
      reason:
        type: string
      code:
        type: integer

paths:
  /auth/api/legacy:
    get:
      operationId: "apiLegacy"
      summary: |
        Gets user credentials from an API key
      parameters:
        -
          name: keyId
          in: query
          description: API key id
          required: true
          type: integer
        -
          name: verificationCode
          in: query
          description: API vCode
          required: true
          type: string
        -
          name: name
          in: query
          description: Character name
          required: false
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: credentials
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/EveCharacterInfo"
  /auth/login/sso:
    post:
      operationId: "signInSSO"
      summary: |
        Logs user into account using SSO
      parameters:
      - name: body
        in: body
        description: Auth code provided by CCP SSO
        required: true
        schema:
          type: object
          properties:
            authCode:
              type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SSOLoginResponse"
  /token/refresh:
    get:
      operationId: "refreshAuthToken"
      summary: |
        Uses user's refresh token to issue new access token
      parameters:
        -
          name: refreshToken
          in: query
          description: Refresh token
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: credentials
            type: object
            properties:
              accessToken:
                type: string
  /user/self/logout:
    post:
      operationId: "logout"
      summary: |
        Signs user out
      description: |
        Please note: due to nature of JWT tokens it is not possible to invalidate session.
        It is responsibility of client to remove now inactive JWT tokens.
      responses:
        200:
          description: Successful response
  /user/self/teamspeak:
    get:
      operationId: "teamspeakRegistrationGet"
      summary: |
        Returns information about teamspeak registration for the user
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  characterId:
                    type: integer
                  expectedNickname:
                    type: string
        404:
          description: Registration not found
          schema:
            type: object
            properties:
              data:
                type: object
    put:
      operationId: "tsRegister"
      summary: |
        Registers on teamspeak
      parameters:
        - in: query
          name: characterId
          type: integer
          required: true
          description: EvE character id to generate expected nickname
      responses:
        200:
          description: Request accepted and/or user registered
          schema:
            properties:
              data:
                type: object
                properties:
                  expectedNickname:
                    type: string
        400:
          description: Returned if account doesn't own character id supplied
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      operationId: "tsRegisterDelete"
      summary: |
        Deletes registration on teamspeak
      responses:
        200:
          description: Registration deleted
        404:
          description: Returned if account doesn't have teamspeak registration
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/self/eve:
    get:
      operationId: "charactersGet"
      summary: |
        Returns list of valid eve characters for the account
      responses:
        200:
          description: Successful response
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: "#/definitions/EveCharacterInfo"
  /user/self/password:
    put:
      operationId: "passwordChange"
      summary: |
        Resets user password
      parameters:
      - name: userData
        in: body
        description: Object with user's new password
        required: true
        schema:
          type: object
          properties:
            new_password:
              type: string
      responses:
        204:
          description: Password succesffuly reset
