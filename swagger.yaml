swagger: '2.0'

info:
  version: "0.0.1"
  title: RED Coalition Resources Auth

host: api.red.greg2010.me
basePath: /v1

consumes:
- application/json
produces:
- application/json

paths:
  /user/login/legacy:
    get:
      operationId: "login_legacy"
      summary: |
        Verifies user credentials using login/email and password and issues new access/refresh tokens
      parameters:
        -
          name: name
          in: query
          description: URL-encoded name of user
          required: false
          type: string
        -
          name: email
          in: query
          description: Email of user
          required: false
          type: string
        -
          name: password
          in: query
          description: Password of user
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: credentials
            type: object
            properties:
              refresh_token:
                type: string
              access_token:
                type: string
    post:
      operationId: "signup_legacy"
      summary: |
        Creates account for user using legacy XML API
      parameters:
      - name: user_data
        in: body
        description: User object with legacy API
        required: true
        schema:
          type: object
          properties:
            key_id:
              type: string
            verification_code:
              type: string
            email:
              type: string
            password:
              type: string
      responses:
        200:
          description: Successful response
  /user/login/sso:
    get:
      operationId: "login_SSO"
      summary: |
        Verifies user credentials using bearer token obtained during SSO and issues new access/refresh tokens
      parameters:
        -
          name: token
          in: query
          description: Bearer token
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: credentials
            type: object
            properties:
              refresh_token:
                type: string
              access_token:
                type: string
    post:
      operationId: "signup_SSO"
      summary: |
        Creates account for user using SSO
      parameters:
      - name: user_data
        in: body
        description: User object with SSO refresh token
        required: true
        schema:
          type: object
          properties:
            refresh_token:
              type: string
            email:
              type: string
            password:
              type: string
      responses:
        200:
          description: Successful response
  /user/login/refresh:
    get:
      operationId: "refresh_auth_token"
      summary: |
        Uses user's refresh token to issue new access token
      parameters:
        -
          name: refresh_token
          in: query
          description: Refresh token
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            title: credentials
            type: object
            properties:
              refresh_token:
                type: string
  /user/signout:
    post:
      operationId: "signout"
      summary: |
        Signs user out
      description: |
        Please note: due to nature of JWT tokens it is not possible to invalidate session.
        It is responsibility of client to remove now inactive JWT tokens.
      responses:
        200:
          description: Successful response